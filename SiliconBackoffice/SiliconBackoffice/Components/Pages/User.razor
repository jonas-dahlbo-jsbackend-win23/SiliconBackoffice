@inject NavigationManager navigationManager
@rendermode InteractiveServer

@page "/user/{userId}"

<h3>User Details</h3>

@if (user == null)
{
    <p>Loading...</p>
}
else
{
    <div class="content-box">
        <EditForm Model="Input" FormName="user" OnValidSubmit="OnValidSubmitAsync" method="post">
            <div class="input-grp">
                <div><label><b>First name:</b>  @user.FirstName</label></div>
                <div><InputText @bind-Value="Input.FirstName" placeholder="Please enter a first name." /></div>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <div class="input-grp">
                <div><label><b>Last name:</b>  @user.LastName</label></div>
                <div><InputText @bind-Value="Input.LastName" placeholder="Please enter a surname." /></div>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>
            <div class="input-grp">
                <div><label><b>Email:</b>  @user.Email</label></div>
                <div><InputText @bind-Value="Input.Email" placeholder="Please enter email address." /></div>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="input-grp">
                <div><label><b>Phone number:</b>  @user.PhoneNumber</label></div>
                <div><InputText @bind-Value="Input.Phone" placeholder="Please enter phone number." /></div>
                <ValidationMessage For="() => Input.Phone" class="text-danger" />
            </div>
            <div class="input-grp" id="bio">
                <div><label><b>Biography:</b> @user.Bio</label></div>
                <div><InputText @bind-Value="Input.Bio" placeholder="Please enter bio." /></div>
                <ValidationMessage For="() => Input.Bio" class="text-danger" />
            </div>
            <div class="btn-grp">
                <button type="submit">Save Changes</button>
            </div>
        </EditForm>
        <div class="btn-grp">
            <button type="button" class="btn btn-danger" @onclick="OnDeleteSubmitAsync">Delete User</button>
        </div>

    </div>
}

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();


    [Parameter]
    public string userId { get; set; } = string.Empty;

    private UserModel? user;
    private readonly HttpClient client = new HttpClient();

    protected override async Task OnInitializedAsync()
    {
        await LoadUserAsync();

    }

    private async Task LoadUserAsync()
    {
        try
        {
            user = await client.GetFromJsonAsync<UserModel>($"http://localhost:7104/api/users/{userId}");


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user: {ex.Message}");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        try
        {
            user.FirstName = Input.FirstName;
            user.LastName = Input.LastName;
            user.Email = Input.Email;
            user.UserName = Input.Email;
            user.PhoneNumber = Input.Phone;
            user.Bio = Input.Bio;
            var response = await client.PutAsJsonAsync($"http://localhost:7104/api/users/{userId}", user);

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating user: {ex.Message}");
        }
    }

    private async Task OnDeleteSubmitAsync()
    {
        await client.DeleteAsync($"http://localhost:7104/api/users/{userId}");
        navigationManager.NavigateTo("/users");
    }

    private sealed class InputModel
    {
        public string Id { get; set; } = string.Empty;
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public string Bio { get; set; } = string.Empty;
    }

    public class UserModel
    {
        public string Id { get; set; } = string.Empty;
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public string Bio { get; set; } = string.Empty;
    }
}
